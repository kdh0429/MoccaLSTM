#include <iostream>
#include <memory>
#include <ctime>
#include <ratio>
#include <chrono>


#include <fstream>
#include <string>
#include <stdio.h>
#include <cmath>
#include <sstream>

using namespace std::chrono;
using namespace std;

int main() {
ifstream file[6];
file[0].open("lstm_weight_ih_l0.txt", ios::in);
file[1].open("lstm_weight_hh_l0.txt", ios::in);
file[2].open("lstm_bias_ih_l0.txt", ios::in);
file[3].open("lstm_bias_hh_l0.txt", ios::in);
file[4].open("linear_weight.txt", ios::in);
file[5].open("linear_bias.txt", ios::in);

int n_input = 6;
int n_seq = 100;
int n_hidden = 20;
int n_output = 2;

float W_ih[4*n_hidden*n_input];
float b_ih[4*n_hidden];

float W_hh[4*n_hidden*n_hidden];
float b_hh[4*n_hidden];

float W_linear[n_output*n_hidden];
float b_linear[n_output];



int index = 0;
float temp;

if(!file[0].is_open())
{
  std::cout<<"Can not find the W_ih file"<<std::endl;
}
while(!file[0].eof())
{
  file[0] >> temp;
  if(temp != '\n')
  {
    W_ih[index] = temp;
    index ++;
  }
}
if(!file[1].is_open())
{
  std::cout<<"Can not find the W_hh file"<<std::endl;
}
index = 0;
while(!file[1].eof())
{
  file[1] >> temp;
  if(temp != '\n')
  {
    W_hh[index] = temp;
    index ++;
  }
}

if(!file[2].is_open())
{
  std::cout<<"Can not find the b_ih file"<<std::endl;
}
index = 0;
while(!file[2].eof())
{
  file[2] >> temp;
  if(temp != '\n')
  {
    b_ih[index] = temp;
    index ++;
  }
}

if(!file[3].is_open())
{
  std::cout<<"Can not find the b_hh file"<<std::endl;
}
index = 0;
while(!file[3].eof())
{
  file[3] >> temp;
  if(temp != '\n')
  {
    b_hh[index] = temp;
    index ++;
  }
}

if(!file[4].is_open())
{
  std::cout<<"Can not find the W_linear file"<<std::endl;
}
index = 0;
while(!file[4].eof())
{
  file[4] >> temp;
  if(temp != '\n')
  {
    W_linear[index] = temp;
    index ++;
  }
}

if(!file[5].is_open())
{
  std::cout<<"Can not find the b_linear file"<<std::endl;
}
index = 0;
while(!file[5].eof())
{
  file[5] >> temp;
  if(temp != '\n')
  {
    b_linear[index] = temp;
    index ++;
  }
}

float hidden[n_hidden];
float cell[n_hidden];
float gates[4*n_hidden];

float input_gate[n_hidden];
float forget_gate[n_hidden];
float cell_gate[n_hidden];
float output_gate[n_hidden];

for (int i=0; i<n_hidden; i++)
{
  hidden[i] = 0.0;
  cell[i] = 0.0;
  input_gate[i] = 0.0;
  forget_gate[i] = 0.0;
  cell_gate[i] = 0.0;
  output_gate[i] = 0.0;
}


float input[n_input*n_seq] = {0.99132,0.0053947,5.5749e-05,-2.7416e-05,0.00032932,-0.00043716,0.99132,0.0053954,0.00039457,-4.7582e-06,0.00049987,1.6396e-05,0.99132,0.0053956,0.00029076,1.8126e-06,2.33e-05,4.8225e-06,0.99132,0.0053957,2.403e-06,2.2658e-06,-2.6423e-06,2.1701e-06,0.99132,0.0053959,-2.403e-06,1.3595e-06,-2.1619e-06,2.1701e-06,0.99132,0.0053959,-2.1627e-06,1.5861e-06,-2.4021e-06,1.2056e-06,0.99132,0.0053957,-0.00058777,-1.1329e-06,-0.000423,-1.929e-06,0.99132,0.0053957,0.00018046,-2.0392e-06,0.00023925,-2.1701e-06,0.99132,0.0053957,0.00020642,-2.2658e-06,2.2339e-05,-2.1701e-06,0.99132,0.0053957,-2.403e-06,-2.0392e-06,-7.6626e-05,-2.4112e-06,0.99132,0.0053957,-0.00033594,2.2658e-06,-0.00066921,2.1701e-06,0.99132,0.0053957,-0.00041163,2.0392e-06,-0.00010185,2.4112e-06,0.99132,0.0053957,-0.00095999,-2.2658e-06,-0.000282,-1.6879e-06,0.99132,0.0053959,0.00037102,2.0392e-06,0.00041243,2.4112e-06,0.99132,0.0053959,-0.00032296,2.2658e-06,-0.00054935,2.1701e-06,0.99132,0.005396,-0.00066131,2.0392e-06,-0.00028248,2.4112e-06,0.99131,0.005396,-0.00011198,2.2658e-06,-0.00018256,2.4112e-06,0.99131,0.005396,-0.001438,2.0392e-06,-0.0011945,1.6879e-06,0.9913,0.005396,-0.00088238,1.5861e-06,-0.00099806,1.6879e-06,0.99129,0.0053956,-0.0029384,-1.79e-05,-0.0028366,-0.00010561,0.99127,0.0053961,-0.0048216,2.2658e-06,-0.0047438,1.4467e-06,0.99124,0.0053964,-0.0069836,1.0649e-05,-0.006799,2.1701e-06,0.9912,0.0053973,-0.009693,0.00031336,-0.0094355,9.0663e-05,0.99114,0.0054001,-0.010859,0.0006018,-0.01066,0.00062331,0.99108,0.0054026,-0.012972,0.00032945,-0.012108,0.00036554,0.99099,0.0054038,-0.018025,6.5709e-06,-0.017847,1.0127e-05,0.9909,0.0054051,-0.019237,0.00020959,-0.019283,0.00024354,0.99079,0.0054053,-0.021325,-1.3595e-06,-0.021114,-4.0991e-06,0.99067,0.0054088,-0.025233,0.0017667,-0.024619,0.0016666,0.99052,0.0054218,-0.031667,0.0023231,-0.031064,0.0024874,0.99035,0.0054455,-0.03269,0.0068045,-0.032518,0.0067466,0.99018,0.0054932,-0.031894,0.0092377,-0.032278,0.0097691,0.99,0.0055416,-0.03818,0.0080785,-0.037437,0.0082088,0.98979,0.0055904,-0.037978,0.010385,-0.03835,0.010661,0.98958,0.0056561,-0.038702,0.013033,-0.038688,0.013531,0.98937,0.0057313,-0.044683,0.014539,-0.04345,0.014768,0.98913,0.005843,-0.047356,0.024652,-0.046879,0.025021,0.98886,0.0060089,-0.055693,0.033319,-0.054402,0.03532,0.98855,0.0062386,-0.058612,0.047188,-0.0593,0.048033,0.98824,0.0065571,-0.063133,0.06413,-0.062461,0.067405,0.98787,0.0069382,-0.074551,0.073062,-0.073163,0.077611,0.98746,0.007384,-0.079968,0.083436,-0.079368,0.087115,0.98702,0.0079025,-0.086087,0.099721,-0.084717,0.10342,0.98656,0.0085143,-0.091562,0.11586,-0.090121,0.12264,0.98605,0.0091905,-0.10198,0.12551,-0.10064,0.1316,0.98549,0.0099316,-0.10748,0.13769,-0.10754,0.14106,0.98492,0.01076,-0.11144,0.14231,-0.11056,0.17072,0.98429,0.011641,-0.12435,0.16633,-0.12179,0.17454,0.98362,0.012624,-0.13138,0.18249,-0.13146,0.19285,0.98291,0.013719,-0.13938,0.20341,-0.13848,0.21344,0.98214,0.01492,-0.15134,0.22215,-0.15018,0.23614,0.9813,0.01623,-0.16346,0.2394,-0.16399,0.25415,0.98042,0.017652,-0.17332,0.2626,-0.17211,0.27841,0.97948,0.019187,-0.18079,0.28103,-0.18131,0.29437,0.9785,0.020815,-0.19232,0.29456,-0.191,0.31418,0.97747,0.022536,-0.19733,0.3139,-0.19494,0.33303,0.97641,0.024364,-0.20862,0.33321,-0.20734,0.35327,0.97528,0.0263,-0.21806,0.3511,-0.21685,0.37476,0.9741,0.028348,-0.23136,0.37397,-0.23002,0.39237,0.97286,0.03049,-0.23747,0.41616,-0.2371,0.44001,0.9716,0.032685,-0.24406,0.39856,-0.24253,0.42374,0.9703,0.034984,-0.2549,0.41493,-0.25321,0.44264,0.96893,0.03737,-0.26625,0.43064,-0.26279,0.45461,0.96752,0.039847,-0.27049,0.44641,-0.2715,0.47641,0.96607,0.042406,-0.27862,0.46299,-0.27773,0.4899,0.96458,0.045064,-0.28649,0.48101,-0.28545,0.50743,0.96304,0.047812,-0.29904,0.49724,-0.29766,0.52406,0.96145,0.050631,-0.30582,0.47535,-0.30469,0.58787,0.95983,0.053517,-0.31032,0.51821,-0.31019,0.55293,0.95818,0.05648,-0.31765,0.53322,-0.31573,0.5642,0.95648,0.059508,-0.32635,0.54285,-0.32361,0.57519,0.95476,0.062578,-0.32616,0.55056,-0.32678,0.58565,0.95303,0.065708,-0.33112,0.56112,-0.33274,0.59718,0.95126,0.068894,-0.34014,0.5702,-0.33995,0.60612,0.94945,0.072121,-0.34546,0.57725,-0.3432,0.61529,0.94763,0.075418,-0.34894,0.59325,-0.34838,0.62966,0.94577,0.078774,-0.3592,0.59868,-0.35718,0.63678,0.94387,0.082176,-0.36333,0.60854,-0.36123,0.64636,0.94196,0.085637,-0.36584,0.62213,-0.36498,0.66041,0.94001,0.089165,-0.37557,0.63538,-0.37618,0.66913,0.93801,0.092721,-0.37966,0.63593,-0.37976,0.67699,0.93602,0.096343,-0.37957,0.64779,-0.37846,0.68976,0.93399,0.10001,-0.39464,0.65234,-0.39159,0.69492,0.93192,0.10371,-0.38951,0.66329,-0.39213,0.7041,0.92986,0.10747,-0.39652,0.67222,-0.39563,0.71308,0.92774,0.11126,-0.40692,0.67729,-0.40483,0.72023,0.92562,0.1151,-0.40449,0.68595,-0.40284,0.72766,0.92347,0.11899,-0.41183,0.6942,-0.41273,0.73945,0.92128,0.12291,-0.4169,0.7008,-0.41871,0.74445,0.91908,0.12689,-0.41935,0.71039,-0.42076,0.75568,0.91684,0.13091,-0.42857,0.72009,-0.42778,0.76469,0.91459,0.13497,-0.42973,0.7257,-0.43131,0.7706,0.91231,0.13909,-0.43314,0.73466,-0.43655,0.78088,0.91001,0.14325,-0.44002,0.74257,-0.44018,0.78838,0.90769,0.14746,-0.44331,0.75271,-0.44137,0.80104,0.90534,0.1517,-0.44937,0.75815,-0.44915,0.80549,0.90297,0.15601,-0.45152,0.77027,-0.45256,0.81926,0.90057,0.16037,-0.46166,0.776,-0.46023,0.8261,0.89813,0.16477,-0.46406,0.78508,-0.46361,0.83543,0.89569,0.16922,-0.46542,0.79641,-0.46445,0.83276};
float output[n_output];

for (int iter=0; iter<20; iter++)
{
high_resolution_clock::time_point t1 = high_resolution_clock::now();
for (int seq = 0; seq < n_seq; seq ++){

  for (int row_idx = 0; row_idx < 4*n_hidden; row_idx++){
    gates[row_idx] = b_ih[row_idx] + b_hh[row_idx];
    for (int input_idx = 0; input_idx < n_input; input_idx++)
      gates[row_idx] += W_ih[n_input*row_idx + input_idx] * input[seq*n_input+input_idx];
    for (int hidden_idx = 0; hidden_idx < n_hidden; hidden_idx++) 
      gates[row_idx] += W_hh[n_hidden*row_idx + hidden_idx] * hidden[hidden_idx];
    
  }

  for (int row_idx = 0; row_idx < n_hidden; row_idx++){
    input_gate[row_idx] = 1/(1+exp(-gates[row_idx]));
    forget_gate[row_idx] = 1/(1+exp(-gates[n_hidden + row_idx]));
    cell_gate[row_idx] = tanh(gates[2*n_hidden+row_idx]);
    output_gate[row_idx] = 1/(1+exp(-gates[n_hidden + row_idx]));

    cell[row_idx] = forget_gate[row_idx]*cell[row_idx] + input_gate[row_idx]*cell_gate[row_idx];
    hidden[row_idx] = output_gate[row_idx]*tanh(cell[row_idx]);
  }
}

for (int joint = 0; joint < n_output; joint++){
  output[joint] = b_linear[joint];
  for (int hidden_idx = 0; hidden_idx < n_hidden; hidden_idx++)
  {
    output[joint] += W_linear[joint*n_hidden + hidden_idx] * hidden[hidden_idx];
  }
}

high_resolution_clock::time_point t2 = high_resolution_clock::now();
duration<double, std::milli> time_span = t2 - t1;
std::cout << "It took me " << time_span.count() << " milliseconds."<<std::endl;
}
std::cout << "Output: " << output[0] << " " << output[1]<< std::endl;
}
